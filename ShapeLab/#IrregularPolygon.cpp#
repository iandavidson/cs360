#include "IrregularPolygon.h"
#include <cmath>

using namespace std;

IrregularPolygon::IrregularPolygon(int num, float s[], float a[])
//default constructor
{
    //we expect there to be atleast 3 sides to make the object
    //and the arrays passed in as parameters to have enough data for specified number of sides.
  numSides = num;
  sides = new float[numSides];
  angles = new float[numSides];
  for (int i = 0; i < numSides; i++)
  {
    sides[i] = s[i];
    angles[i] = a[i];
  }


}

IrregularPolygon::IrregularPolygon(const IrregularPolygon & s)
//copy constructor
{
  numSides = s.numSides;
  sides = new float[numSides];
  angles = new float[numSides];
  for(int i = 0; i < numSides; i++)
  {
    sides[i] = s.sides[i];
    angles[i] = s.angles[i];
  }


}

IrregularPolygon::~IrregularPolygon()
{
  delete[] sides;
  delete[] angles;

}

IrregularPolygon & IrregularPolygon::operator = (const IrregularPolygon & s) //overloaded assignment operator
//deep copy
{
  numSides = s.numSides;
  for( int i =0; i < numSides; i++){
    sides[i] = s.sides[i];
    angles[i] = s.angles[i];
  }

  return * this;
  
}

float  IrregularPolygon::getNumSides() const
{
  return numSides;

}

float* IrregularPolygon::getSides() const
{
  return sides;

}

float* IrregularPolygon::getAngles() const
{
  return angles;

}

float IrregularPolygon::triangleArea(float s1, float s2, float s3) const
{
  //cout << "s1: " << s1 << " s2: " << s2 << " s3: " << s3 << endl;
  float s = (s1 + s2 + s3)/2;
  s = (s *(s - s1) * (s - s2) * (s - s3));
  return sqrt(s);
}

float IrregularPolygon::getArea() const

{

//   // float temp = triangleArea(sides[0], sides[1], sides[2]);
//   // cout << "triangle area 1" << temp << endl;

  //must have at least 4 sides to use the further algorithm
  if(numSides == 3)
    {
      return triangleArea(sides[0], sides[1], sides[2]);
    }
  float area = 0;
  int currentSideIndex = numSides - 1;
  int currentAngleIndex = numSides - 1;
  // for lines drawn
  float lines[numSides]; 
  // for partial Angles;
  float partialAngles[numSides];
  //   define lineTemp, partialAngleTemp, temp;
  float lineTemp; 
  float partialAngleTemp; 
  float temp;
  int l = 0;//lines/partialAngles accumulator 


//   //compute cosine idenity with a[0] side[0] & side[currentSideIndex]
  lineTemp = (sides[0] * sides[0]) + (sides[currentSideIndex] * sides[currentSideIndex]);
  temp =  (sides[0] * sides[currentSideIndex]) * cos (angles[0] * M_PI / 180);
//    cout << "temp: " << temp << endl;
  lineTemp += sqrt(2 * temp);
//     cout << "cos(angle[0])" << cos(angles[0]) << endl;
  lines[l] = lineTemp;
//    //now with line we can do sine law to get the part of angles[currentSideIndex]
  partialAngleTemp = (lines[0]*angles[0])/sides[currentSideIndex];
  partialAngles[l] = partialAngleTemp;
  area += triangleArea(sides[0], sides[currentSideIndex], lines[0]);  //add first 
  currentSideIndex--;
//       cout << "made it through the first iteration" << endl;

  while(currentSideIndex > 2){

    lineTemp = (lines[l] *  lines[l]) + (sides[currentSideIndex] * sides[currentSideIndex]);
    lineTemp += sqrt( 2 * sides[currentSideIndex] * lines[l] * cos ((angles[currentAngleIndex] - partialAngles[l])* M_PI/ 180));
    lines[l + 1] = lineTemp;
    partialAngleTemp = (lines[l] * partialAngles[l])/ sides[currentSideIndex];
    partialAngles[l + 1] = partialAngleTemp;
    temp = triangleArea(sides[currentSideIndex], lines[l], lines[l+1]);
    area += temp;
//   //cout << "triangle area: " << triangleArea(sides[currentSideIndex], lines[l], lines[l+1]);
//   //things to inc/dec:  
//   //  ++: l
//   //  --: currentSideIndex, currentAngleIndex  

    l++;
    currentSideIndex--;
    currentAngleIndex--;
//   cout << "after iteration; l:" << l << " csi: " << currentSideIndex << " cai: " << currentAngleIndex << endl;
  }
  // compute & += area of last triangle
  temp = triangleArea(sides[1], sides[2], lines[l]);

  cout << "area: " << area << endl;
  return area;
}

float IrregularPolygon::getPerimeter() const
{
  int perimeter = 0;
  for (int i = 0; i < numSides; i++){
    perimeter += sides[i];
  }
  return perimeter;
}

ostream & operator << (ostream & outs, const IrregularPolygon & s)
{
  outs << "A Irregular Polygon with " << s.getNumSides() << " sides" << ", has a perimeter of ";
  outs << s.getPerimeter() << ", and an area of ";
  outs << s.getArea() << "." << endl;
  return outs;
}

bool IrregularPolygon::operator == (IrregularPolygon other) const
{
  if (numSides != other.numSides)
      return false;
  for (int i = 0; i < numSides; i++) {
      if ((sides[i] != other.sides[i]) || (angles[i] != other.angles[i]))
          return false;
  }
  return true;
}

bool IrregularPolygon::operator != (const IrregularPolygon & other) const
{
  for (int i = 0; i < numSides; i++) {
      if ((sides[i] != other.sides[i]) || (angles[i] != other.angles[i])){
          return true;
      }
  }
  return false;
}








